/**
 * angular-schema-form-prdg-file-upload - Upload file type for Angular Schema Form
 * @version v0.1.5
 * @link https://github.com/JamesGuthrie/angular-schema-form-prdg-file-upload
 * @license MIT
 */
"use strict";function processSchema(e){var a="Wrong file type. Allowed types are ",r="This file is too large. Maximum size allowed is ",s="Current file size:",o="You have to upload at least one file",l="You can't upload more than one file.";return e.pattern&&e.pattern.mimeType&&!e.pattern.validationMessage&&(e.pattern.validationMessage=a),e.maxSize&&e.maxSize.maximum&&!e.maxSize.validationMessage&&(e.maxSize.validationMessage=r,e.maxSize.validationMessage2=s),e.minItems&&e.minItems.minimum&&!e.minItems.validationMessage&&(e.minItems.validationMessage=o),e.maxItems&&e.maxItems.maximum&&!e.maxItems.validationMessage&&(e.maxItems.validationMessage=l),e}angular.module("schemaForm").config(["schemaFormProvider","schemaFormDecoratorsProvider","sfPathProvider",function(e,a,r){var s=function(a,s,o){if("array"===s.type&&"singlefile"===s.format){s=processSchema(s);var l=e.stdFormObj(a,s,o);return l.key=o.path,l.type="prdgFileUpload",o.lookup[r.stringify(o.path)]=l,l}};e.defaults.array.unshift(s);var o=function(a,s,o){if("array"===s.type&&"multifile"===s.format){s=processSchema(s);var l=e.stdFormObj(a,s,o);return l.key=o.path,l.type="prdgFileUpload",o.lookup[r.stringify(o.path)]=l,l}};e.defaults.array.unshift(o),a.addMapping("bootstrapDecorator","prdgFileUpload","directives/decorators/bootstrap/angular-schema-form-prdg-file-upload/angular-schema-form-prdg-file-upload.html")}]),angular.module("schemaForm").run(["$templateCache",function(e){e.put("directives/decorators/bootstrap/angular-schema-form-prdg-file-upload/angular-schema-form-prdg-file-upload.html",'<div class="form-group {{form.htmlClass}}" ng-class="{\'has-error\': hasError(), \'has-success\': hasSuccess()}">\n    <label class="control-label {{form.labelHtmlClass}}"\n           ng-show="form.title && form.notitle !== true"\n           ng-class="{\'sr-only\': !showTitle(), \'text-danger\': form.$error.required}">\n        {{ form.title }}\n    </label>\n    <div class="help-block" sf-message="form.description"></div>\n    <div class="well well-sm bg-white form-control" style="height:auto;">\n         <!-- ng-class="{\'has-error border-danger\': form.$error.required || (hasError() && errorMessage(schemaError()))}">-->\n        <prdg-file-upload url="form.endpoint"\n                          files="$$value$$"\n                          multiple="form.schema.format !== \'singlefile\'"\n                          ng-disabled="form.readonly"\n                          schema-validate="form"\n                          ng-model="$$value$$"></prdg-file-upload>\n    </div>\n    <span ng-if="form.feedback !== false"\n          class="form-control-feedback"\n          ng-class="evalInScope(form.feedback) || {\'glyphicon\': true, \'glyphicon-ok\': hasSuccess(), \'glyphicon-remove\': hasError() }"\n          aria-hidden="true"></span>\n\n    <span ng-if="hasError() || hasSuccess()"\n          id="{{form.key.slice(-1)[0] + \'Status\'}}"\n          class="sr-only">{{ hasSuccess() ? \'(success)\' : \'(error)\' }}</span>\n</div>\n')}]);